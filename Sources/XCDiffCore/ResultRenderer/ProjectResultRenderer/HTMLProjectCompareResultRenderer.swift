//
// Copyright 2020 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import Foundation

final class HTMLProjectCompareResultRenderer: ProjectCompareResultRenderer {
    private let output: AnyOutput<String>
    private let verbose: Bool
    private let header = """
    <!doctype html>

    <html lang="en">
    <head>
        <meta charset="utf-8">
        <title>xcdiff results</title>
        <meta name="description" content="xcdiff results">
        <meta name="author" content="xcdiff">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            html, body {
                margin: 0;
                padding: 0;
            }

            body {
                font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
                font-size: 14px;
                line-height: 1.5;
                background-color: #fff;
                color: #333;
            }

            footer {
                border-top: 1px #aaa dotted;
                margin-top: 3em;
                color: #aaa;
                font-size: 11px;
                padding-top: 0.4em;
                padding-bottom: 0.4em;
            }

            section {
                margin-top: 1em;
                padding: 0.1em 1em 0.1em 1em;
                border-radius: 0.7em;
            }

            li {
                font-family: 'Courier New', Courier, monospace;
            }

            h3 {
                padding: 0.2em 0.5em 0.2em 0.5em;
                border-radius: 0.2em;
            }

            .container {
                max-width: 980px;
                padding: 10px;
                margin-right: auto;
                margin-left: auto;
            }

            .warning {
                background-color: #fffce3;
            }

            .warning h3 {
                background-color: #FFF2B8;
            }

            .success {
                background-color: #F1FFE9;
            }

            .content {
                padding-left: 2em;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <header>
                <h1>Diff</h1>
            </header>
    """

    private let footer = """
            <footer>
                Generated by <a href="https://github.com/bloomberg/xcdiff">xcdiff</a>.
            </footer>
        </div>
    </body>
    </html>
    """

    init(output: AnyOutput<String>, verbose: Bool) {
        self.output = output
        self.verbose = verbose
    }

    func render(_ result: ProjectCompareResult) throws {
        output.write(header)
        result.results.forEach(render(_:))
        output.write(footer)
    }

    // MARK: - Private

    private func render(_ result: CompareResult) {
        guard result.same() == false else {
            section(.success) {
                title(.success, result: result)
            }
            return
        }

        section(.warning) {
            title(.warning, result: result)
            guard verbose else {
                return
            }
            tag("div", .content) {
                let onlyInFirst = result.onlyInFirst
                if !onlyInFirst.isEmpty {
                    tag("h4") {
                        output.write("Only in first (\(onlyInFirst.count))")
                    }
                    tag("ul") {
                        onlyInFirst.forEach { value in
                            tag("li") {
                                output.write(value)
                            }
                        }
                    }
                }

                let onlyInSecond = result.onlyInSecond
                if !onlyInSecond.isEmpty {
                    tag("h4") {
                        output.write("Only in second (\(onlyInSecond.count))")
                    }
                    tag("ul") {
                        onlyInSecond.forEach { value in
                            tag("li") {
                                output.write(value)
                            }
                        }
                    }
                }

                let differentValues = result.differentValues
                if !differentValues.isEmpty {
                    tag("h4") {
                        output.write("Different values (\(differentValues.count))")
                    }
                    tag("ul") {
                        differentValues.forEach { value in
                            tag("li") {
                                output.write(value.context)
                                tag("ul") {
                                    tag("li") {
                                        output.write(value.first)
                                    }
                                    tag("li") {
                                        output.write(value.second)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private func section(_ cssClass: CSSClass, _ content: () -> Void) {
        tag("section", cssClass, content)
    }

    private func title(_ cssClass: CSSClass, result: CompareResult) {
        let rootContext = result.tag.uppercased()
        let subContext = !result.context.isEmpty ? " > " + result.context.joined(separator: " > ") : ""
        let title = rootContext + subContext
        tag("h3") {
            output.write(title)
        }
    }

    private func tag(_ name: String, _ cssClass: CSSClass? = nil, _ content: () -> Void) {
        let cssClassString: String
        if let cssClass = cssClass {
            cssClassString = " class=\(cssClass.rawValue)"
        } else {
            cssClassString = ""
        }
        output.write("""
        <\(name)\(cssClassString)>
        """)
        content()
        output.write("""
        </\(name)>
        """)
    }

    private enum CSSClass: String {
        case success
        case warning
        case content
    }
}
